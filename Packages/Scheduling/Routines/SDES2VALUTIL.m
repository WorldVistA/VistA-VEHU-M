SDES2VALUTIL ;ALB/BWF - SDES2 VALIDATION UTILITY ;JUL 28, 2023
 ;;5.3;Scheduling;**853**;Aug 13, 1993;Build 9
 ;;Per VHA Directive 6402, this routine should not be modified
 ;
 Q
 ; VALRETURN - 1 for success, 0 for failure
 ; FILE - File Manager file number
 ; FIELD - File Manager field number
 ; VALUE - input value, either text or numeric value - value will be checked against the input transform
 ; REQUIRED - (1 for required, otherwise, not required)
 ; CANDELETE - (1 - deletion allowed, otherwise, deletion is not allowed)
 ; MISSINGERRID - Error ID from the SDEC ERROR CODES file (409.93)
 ; INVALIDERRID - Error ID from the SDEC ERROR CODES file (409.93)
 ;
VALFILEIEN(VALRETURN,ERRORS,FILENUM,VALUE,REQUIRED,CANDELETE,MISSINGERRID,INVALIDERRID) ;
 N FDATA,FILERR,GLOBALROOT,FERR,ERRLOOP,ERRTEXT
 K VALRETURN
 S VALRETURN=0
 I '$L($G(FILENUM)) Q
 I '$G(CANDELETE),$G(VALUE)="@" D ERRLOG^SDES2JSON(.ERRORS,52,"This field cannot be deleted.") Q
 I $G(CANDELETE),($G(VALUE)="@"!($G(VALUE)="")) S VALRETURN=1 Q
 D FILE^DID(FILENUM,,"GLOBAL NAME;NAME","FDATA","FERR")
 I $D(FERR) D  Q
 .S ERRLOOP=0 F  S ERRLOOP=$O(FERR("DIERR",1,"TEXT",ERRLOOP)) Q:'ERRLOOP  D
 ..S ERRTEXT=$G(FERR("DIERR",1,"TEXT",ERRLOOP))
 ..D ERRLOG^SDES2JSON(.ERRORS,52,ERRTEXT) Q
 I $G(REQUIRED),$G(VALUE)="" D  Q
 .I $G(MISSINGERRID) D ERRLOG^SDES2JSON(.ERRORS,MISSINGERRID) Q
 .D ERRLOG^SDES2JSON(.ERRORS,52,"Missing IEN for file: "_$G(FDATA("NAME")))
 ; if we get to this point and the field is not required, quit, no need to check the global
 I '$G(REQUIRED),$G(VALUE)="" S VALRETURN=1 Q
 S GLOBALROOT=$G(FDATA("GLOBAL NAME"))
 S GLOBALROOT=GLOBALROOT_VALUE_")"
 I '$D(@GLOBALROOT@(0)) D  Q
 .I $G(INVALIDERRID) D ERRLOG^SDES2JSON(.ERRORS,INVALIDERRID) Q
 .D ERRLOG^SDES2JSON(.ERRORS,52,"Invalid IEN: "_$G(FDATA("NAME")))
 S VALRETURN=1
 Q
 ;
 ; VALRETURN - return array
 ;             VALRETURN= 1 - valid, 0 - not valid
 ;             VALRETURN(FILENUMBER, FIELD NUMBER,"I")=INTERNAL FILEMAN VALUE
 ;             VALRETURN(FILENUMBER, FIELD NUMBER,"E")=EXTERNAL FILEMAN VALUE
 ; ERRORS - error array contains errors
 ; FILE - File Manager file number
 ; FIELD - File Manager field number
 ; VALUE - input value, either text or numeric value - value will be checked against the input transform
 ; REQUIRED - (1 for required, otherwise, not required)
 ; CANDELETE - (1 - deletion allowed, otherwise, deletion is not allowed)
 ; MISSINGERRID - Error ID from the SDEC ERROR CODES file (409.93)
 ; INVALIDERRID - Error ID from the SDEC ERROR CODES file (409.93)
 ;
VALFIELD(VALRETURN,ERRORS,FILE,FLD,VALUE,REQUIRED,CANDELETE,MISSINGERRID,INVALIDERRID) ;
 N RESULTS,CONT,CODE,INTERNALCODE,FOUND,RESULTS,ITEM,FERR,ERRLOOP,ERRTEXT,EXTVALUE
 N PTFILE,IENFROMVALUE,TEXTGLROOT,GLOBALROOT,MORETHANONE,HELPTEXT,X,INPUTCHK,LABEL
 K VALRETURN
 S VALRETURN=0
 I $G(FILE)=""!($G(FLD)="") D ERRLOG^SDES2JSON(.ERRORS,52,"Invalid file or field.") Q
 ; not a valid DD reference
 I '$D(^DD(FILE,FLD)) D ERRLOG^SDES2JSON(.ERRORS,52,"Invalid file or field.") Q
 D FIELD^DID(FILE,FLD,"","POINTER;SET OF CODES;SPECIFIER;LABEL;INPUT TRANSFORM;HELP-PROMPT","RESULTS","FERR")
 I $D(FERR) D  Q
 .S ERRLOOP=0 F  S ERRLOOP=$O(FERR("DIERR",1,"TEXT",ERRLOOP)) Q:'ERRLOOP  D
 ..S ERRTEXT=$G(FERR("DIERR",1,"TEXT",ERRLOOP))
 ..D ERRLOG^SDES2JSON(.ERRORS,52,ERRTEXT) Q
 S LABEL=$G(RESULTS("LABEL"))
 ; calling function wants this field to be required.
 I $G(REQUIRED),$G(VALUE)="" D  Q
 .I $G(MISSINGERRID) D ERRLOG^SDES2JSON(.ERRORS,MISSINGERRID) Q
 .D ERRLOG^SDES2JSON(.ERRORS,52,"Missing required value for field: "_LABEL_" (#"_FLD_")")
 I '$G(REQUIRED),$G(VALUE)="" S VALRETURN=1 Q
 ;
 ; if calling application indicates 'required' and '@' is passed, produce an error.
 I $G(REQUIRED),$G(VALUE)="@" D ERRLOG^SDES2JSON(.ERRORS,229,LABEL) Q
 ; for non-required fields, if this is '@' or "", quit, no need to check further
 I $G(CANDELETE),($G(VALUE)="@"!($G(VALUE)="")) S VALRETURN=1 Q
 ;
 ; set of codes fields
 I $G(RESULTS("SPECIFIER"))["S" D  Q
 .S FOUND=0
 .F ITEM=1:1:$L(RESULTS("SET OF CODES"),";") D  Q:FOUND
 ..S CODE=$P(RESULTS("SET OF CODES"),";",ITEM) Q:'$L(CODE)
 ..S INTERNALCODE=$P(CODE,":")
 ..S EXTVALUE=$P(CODE,":",2)
 ..I VALUE=INTERNALCODE!(VALUE=EXTVALUE) D  Q
 ...D SETRETURN(.VALRETURN,FILE,FLD,INTERNALCODE,EXTVALUE)
 ...S FOUND=1
 .I 'FOUND D  Q
 ..I $G(INVALIDERRID) D ERRLOG^SDES2JSON(.ERRORS,INVALIDERRID) Q
 ..D ERRLOG^SDESJSON(.ERRORS,52,"Invalid set of codes value: "_VALUE_".")
 ;
 ; Validate Numeric and text fields
 I $G(RESULTS("SPECIFIER"))["N"!($G(RESULTS("SPECIFIER"))["F") D  Q
 .I RESULTS("SPECIFIER")="F",VALUE["^" D  Q
 ..I $G(INVALIDERRID) D ERRLOG^SDES2JSON(.ERRORS,INVALIDERRID) Q
 ..D ERRLOG^SDESJSON(.ERRORS,52,LABEL_" :"_HELPTEXT)
 .S INPUTCHK=$G(RESULTS("INPUT TRANSFORM"))
 .S HELPTEXT=$G(RESULTS("HELP-PROMPT"))
 .I $G(REQUIRED),'$L($G(VALUE)) D ERRLOG^SDESJSON(.ERRORS,52,"Missing field: "_LABEL_" (#"_FLD_")") Q
 .S X=VALUE
 .X INPUTCHK
 .I '$D(X) D  Q
 ..I $G(INVALIDERRID) D ERRLOG^SDES2JSON(.ERRORS,INVALIDERRID) Q
 ..D ERRLOG^SDESJSON(.ERRORS,52,LABEL_" :"_HELPTEXT)
 .D SETRETURN(.VALRETURN,FILE,FLD,X,X)
 ;
 ; Validate pointers - input value can be numeric, or the .01 NAME (for files with unique names only)
 ; NAMES SHOULD NOT BE USED FOR NON-UNIQUE FILES WHERE THERE CAN BE MORE THAN ONE NAME THAT IS THE SAME
 ; EX. PATIENT (#2), NEW PERSON (#200)
 I $G(RESULTS("SPECIFIER"))["P" D  Q
 .S GLOBALROOT=U_$G(RESULTS("POINTER"))
 .I '$G(REQUIRED),$G(VALUE)="" Q
 .; value is not numeric - treat as the .01 field and use the 'B' index
 .I '+$G(VALUE) D
 ..S TEXTGLROOT=GLOBALROOT_"""B"""_")"
 ..S IENFROMVALUE=$O(@TEXTGLROOT@(VALUE,0))
 ..I IENFROMVALUE,$O(@TEXTGLROOT@(VALUE,IENFROMVALUE)) S MORETHANONE=1
 .I $G(MORETHANONE) D ERRLOG^SDES2JSON("More than one entry matches '"_VALUE_"'. Cannot resolve pointer.")
 .I '+$G(VALUE),'$G(IENFROMVALUE) D  Q
 ..D ERRLOG^SDES2JSON(.ERRORS,52,"Invalid pointer/name value: '"_VALUE_"' for field "_LABEL_" (#"_FLD_")")
 .I $G(IENFROMVALUE) S GLOBALROOT=GLOBALROOT_IENFROMVALUE_")"
 .I '$G(IENFROMVALUE),+$G(VALUE) S GLOBALROOT=GLOBALROOT_VALUE_")"
 .I '$D(@GLOBALROOT@(0)) D  Q
 ..I $G(INVALIDERRID) D ERRLOG^SDES2JSON(.ERRORS,INVALIDERRID) Q
 ..D ERRLOG^SDES2JSON(.ERRORS,52,"Invalid pointer value: "_LABEL)
 .I $G(IENFROMVALUE) D SETRETURN(.VALRETURN,FILE,FLD,IENFROMVALUE,VALUE) Q
 .S PTFILE=+$P(RESULTS("SPECIFIER"),"P",2)
 .D SETRETURN(.VALRETURN,FILE,FLD,VALUE,$$GET1^DIQ(PTFILE,VALUE,.01,"E"))
 Q
 ; validate number is within given range LOW to HIGH
VALNUMBERRNG(VALRETURN,ERRORS,INPUTVALUE,LOW,HIGH,ISREQUIRED,MISSINGERRID,INVALIDERRID)  ;
 K VALRETURN
 S VALRETURN=0
 I $G(ISREQUIRED),$G(INPUTVALUE)="" D  Q
 .I $G(MISSINGERRID) D ERRLOG^SDES2JSON(.ERRORS,MISSINGERRID) Q
 .D ERRLOG^SDES2JSON(.ERRORS,52,"Missing numeric input.")
 I '$G(ISREQUIRED),$G(INPUTVALUE)="" Q
 I INPUTVALUE<LOW!(INPUTVALUE>HIGH) D  Q
 .I $G(INVALIDERRID) D ERRLOG^SDES2JSON(.ERRORS,INVALIDERRID) Q
 .D ERRLOG^SDES2JSON(.ERRORS,52,"Number must be between "_LOW_"-"_HIGH)
 D SETRETURN(.VALRETURN)
 Q
SETRETURN(VALRETURN,FILE,FLD,INTERNALVAL,EXTERNALVAL)   ;
 S VALRETURN=1
 Q:'$D(FILE)!('$D(FLD))
 I $L($G(INTERNALVAL)) S VALRETURN(FILE,FLD,"I")=INTERNALVAL
 I $L($G(EXTERNALVAL)) S VALRETURN(FILE,FLD,"E")=EXTERNALVAL
 Q
